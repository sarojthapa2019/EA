<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">




    <!--Default Login/Logout-->
    <!--<sec:http auto-config="true">-->
        <!--<sec:intercept-url pattern="/login" access="permitAll"/>-->
        <!--<sec:intercept-url pattern="/logout" access="permitAll"/>-->
        <!--<sec:intercept-url pattern="/" access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')"/>-->
        <!--<sec:intercept-url method="GET" pattern="/addCar" access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')"/>-->
        <!--<sec:intercept-url method="POST" pattern="/addCar" access="hasRole('ROLE_ADMIN')"/>-->
    <!--</sec:http>-->

    <!--Customized Login/Logout-->
    <sec:http use-expressions="true">
        <sec:intercept-url pattern="/login" access="permitAll"/>
        <sec:intercept-url pattern="/logout" access="permitAll"/>
        <sec:intercept-url pattern="/" access="hasRole('ROLE_USER')"/>
        <sec:intercept-url method="GET" pattern="/addCar" access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')"/>
        <sec:intercept-url method="POST" pattern="/addCar" access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')"/>
        <sec:form-login login-page="/login"
                        username-parameter="username"
                        password-parameter="password"
                        authentication-failure-url="/login?error=true"
                        default-target-url="/"/>
        <sec:logout logout-url="/logout" logout-success-url="/login"/>
    </sec:http>

    <!--No Password Encoder for hardcoded value-->
    <!--<sec:authentication-manager>-->
        <!--<sec:authentication-provider>-->
            <!--<sec:user-service>-->
                <!--<sec:user name="user" password="{noop}user" authorities="ROLE_USER"/>-->
                <!--<sec:user name="admin" password="{noop}admin" authorities="ROLE_USER, ROLE_ADMIN"/>-->
            <!--</sec:user-service>-->
        <!--</sec:authentication-provider>-->
    <!--</sec:authentication-manager>-->

    <!-- Use bcrypt for password encoder for hardcoded value-->
    <!--<sec:authentication-manager>-->
        <!--<sec:authentication-provider>-->
            <!--<sec:user-service>-->
                <!--<sec:user name="admin" password="{bcrypt}$2a$10$ZNkwte139xDVivH6FEmhHeu54V8js6nxXulxfjNh7UDQ57McBIez2" authorities="ROLE_USER, ROLE_ADMIN" />-->
                <!--<sec:user name="user" password="{bcrypt}$2a$10$40YaG7OfjVpLITEc3kAbwukHz4Qxuvo8abaBPssLJEQOGuPE6vM1O" authorities="ROLE_USER" />-->
            <!--</sec:user-service>-->
        <!--</sec:authentication-provider>-->
    <!--</sec:authentication-manager>-->

    <!-- Select users and user_roles from database -->
    <sec:authentication-manager>
        <sec:authentication-provider>
            <sec:password-encoder ref="passwordEncoder"/>
            <sec:jdbc-user-service data-source-ref="dataSource"
                                   users-by-username-query=
                                           "select username, password, 1 from user where username=?"
                                   authorities-by-username-query=
                                           "select u.username, r.name from user u inner join user_authority ur on(u.id=ur.user_id) inner join authority r on(ur.authority_id=r.id) where u.username=?"/>
        </sec:authentication-provider>
    </sec:authentication-manager>


    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
    </bean>



</beans>